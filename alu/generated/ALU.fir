;buildInfoPackage: chisel3, version: 3.1.7, scalaVersion: 2.11.12, sbtVersion: 1.1.1, builtAtString: 2019-03-20 22:15:13.399, builtAtMillis: 1553120113399
circuit ALU : 
  module ALU : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<8>, flip b : UInt<8>, flip ctrl : UInt<3>, result : UInt<8>, negative : UInt<1>, zero : UInt<1>, overflow : UInt<1>, product : UInt<16>}
    
    node _T_21 = bits(io.result, 7, 7) @[Adder.scala 19:27]
    io.negative <= _T_21 @[Adder.scala 19:15]
    node _T_22 = bits(io.a, 7, 7) @[Adder.scala 20:23]
    node _T_23 = bits(io.b, 7, 7) @[Adder.scala 20:44]
    node _T_24 = eq(_T_22, _T_23) @[Adder.scala 20:36]
    node _T_25 = bits(io.result, 7, 7) @[Adder.scala 20:71]
    node _T_26 = bits(io.a, 7, 7) @[Adder.scala 20:92]
    node _T_27 = neq(_T_25, _T_26) @[Adder.scala 20:84]
    node _T_28 = and(_T_24, _T_27) @[Adder.scala 20:58]
    io.overflow <= _T_28 @[Adder.scala 20:15]
    node _T_30 = neq(io.result, UInt<1>("h00")) @[Adder.scala 21:30]
    node _T_31 = not(_T_30) @[Adder.scala 21:18]
    io.zero <= _T_31 @[Adder.scala 21:15]
    node _T_32 = add(io.a, io.b) @[Adder.scala 22:23]
    node addition = tail(_T_32, 1) @[Adder.scala 22:23]
    wire out : UInt<8> @[Adder.scala 23:17]
    reg storedValue : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[Adder.scala 24:29]
    storedValue <= out @[Adder.scala 24:29]
    storedValue <= out @[Adder.scala 25:15]
    io.product <= UInt<16>("h00") @[Adder.scala 27:14]
    node _T_37 = eq(io.ctrl, UInt<3>("h00")) @[Adder.scala 28:16]
    when _T_37 : @[Adder.scala 28:33]
      out <= io.a @[Adder.scala 29:9]
      skip @[Adder.scala 28:33]
    else : @[Adder.scala 30:32]
      node _T_38 = eq(io.ctrl, UInt<3>("h01")) @[Adder.scala 30:23]
      when _T_38 : @[Adder.scala 30:32]
        node _T_39 = add(io.a, io.b) @[Adder.scala 31:17]
        node _T_40 = tail(_T_39, 1) @[Adder.scala 31:17]
        out <= _T_40 @[Adder.scala 31:9]
        skip @[Adder.scala 30:32]
      else : @[Adder.scala 32:37]
        node _T_41 = eq(io.ctrl, UInt<3>("h02")) @[Adder.scala 32:23]
        when _T_41 : @[Adder.scala 32:37]
          node _T_42 = sub(io.a, io.b) @[Adder.scala 33:17]
          node _T_43 = asUInt(_T_42) @[Adder.scala 33:17]
          node _T_44 = tail(_T_43, 1) @[Adder.scala 33:17]
          out <= _T_44 @[Adder.scala 33:9]
          skip @[Adder.scala 32:37]
        else : @[Adder.scala 34:37]
          node _T_45 = eq(io.ctrl, UInt<3>("h03")) @[Adder.scala 34:23]
          when _T_45 : @[Adder.scala 34:37]
            node _T_46 = mul(io.a, io.b) @[Adder.scala 35:24]
            io.product <= _T_46 @[Adder.scala 35:16]
            out <= io.product @[Adder.scala 36:9]
            skip @[Adder.scala 34:37]
          else : @[Adder.scala 37:35]
            node _T_47 = eq(io.ctrl, UInt<3>("h04")) @[Adder.scala 37:23]
            when _T_47 : @[Adder.scala 37:35]
              node _T_48 = div(io.a, io.b) @[Adder.scala 38:17]
              out <= _T_48 @[Adder.scala 38:9]
              skip @[Adder.scala 37:35]
            else : @[Adder.scala 39:32]
              node _T_49 = eq(io.ctrl, UInt<3>("h05")) @[Adder.scala 39:23]
              when _T_49 : @[Adder.scala 39:32]
                node _T_50 = and(io.a, io.b) @[Adder.scala 40:17]
                out <= _T_50 @[Adder.scala 40:9]
                skip @[Adder.scala 39:32]
              else : @[Adder.scala 41:31]
                node _T_51 = eq(io.ctrl, UInt<3>("h06")) @[Adder.scala 41:23]
                when _T_51 : @[Adder.scala 41:31]
                  node _T_52 = or(io.a, io.b) @[Adder.scala 42:17]
                  out <= _T_52 @[Adder.scala 42:9]
                  skip @[Adder.scala 41:31]
                else : @[Adder.scala 43:32]
                  node _T_53 = eq(io.ctrl, UInt<3>("h07")) @[Adder.scala 43:23]
                  when _T_53 : @[Adder.scala 43:32]
                    node _T_54 = xor(io.a, io.b) @[Adder.scala 44:17]
                    out <= _T_54 @[Adder.scala 44:9]
                    skip @[Adder.scala 43:32]
                  else : @[Adder.scala 45:16]
                    out <= UInt<8>("h00") @[Adder.scala 46:9]
                    skip @[Adder.scala 45:16]
    io.result <= storedValue @[Adder.scala 49:13]
    
