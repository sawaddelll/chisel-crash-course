;buildInfoPackage: chisel3, version: 3.1.7, scalaVersion: 2.11.12, sbtVersion: 1.1.1, builtAtString: 2019-03-20 22:15:13.399, builtAtMillis: 1553120113399
circuit Test : 
  module DataGen : 
    input clock : Clock
    input reset : UInt<1>
    output io : {a : UInt<8>[2], b : UInt<8>[2], flip y : UInt<8>[2], flip ovfl : UInt<1>, flip zero : UInt<1>, flip neg : UInt<1>, flip ctrl : UInt<3>}
    
    io.a[0] <= UInt<1>("h00") @[Test.scala 21:13]
    io.b[0] <= UInt<1>("h00") @[Test.scala 22:13]
    io.a[1] <= UInt<1>("h00") @[Test.scala 21:13]
    io.b[1] <= UInt<1>("h00") @[Test.scala 22:13]
    reg value : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Counter.scala 26:33]
    when UInt<1>("h01") : @[Counter.scala 63:17]
      node _T_63 = eq(value, UInt<2>("h03")) @[Counter.scala 34:24]
      node _T_65 = add(value, UInt<1>("h01")) @[Counter.scala 35:22]
      node _T_66 = tail(_T_65, 1) @[Counter.scala 35:22]
      value <= _T_66 @[Counter.scala 35:13]
      skip @[Counter.scala 63:17]
    node _T_67 = and(UInt<1>("h01"), _T_63) @[Counter.scala 64:20]
    wire slowclk : UInt<1> @[Test.scala 26:21]
    node _T_70 = rem(value, UInt<2>("h02")) @[Test.scala 27:14]
    node _T_72 = eq(_T_70, UInt<1>("h00")) @[Test.scala 27:19]
    when _T_72 : @[Test.scala 27:28]
      slowclk <= UInt<1>("h01") @[Test.scala 28:13]
      skip @[Test.scala 27:28]
    else : @[Test.scala 29:16]
      slowclk <= UInt<1>("h00") @[Test.scala 30:13]
      skip @[Test.scala 29:16]
    reg value_1 : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[Counter.scala 26:33]
    when slowclk : @[Counter.scala 63:17]
      node _T_78 = eq(value_1, UInt<8>("h0ff")) @[Counter.scala 34:24]
      node _T_80 = add(value_1, UInt<1>("h01")) @[Counter.scala 35:22]
      node _T_81 = tail(_T_80, 1) @[Counter.scala 35:22]
      value_1 <= _T_81 @[Counter.scala 35:13]
      skip @[Counter.scala 63:17]
    node _T_82 = and(slowclk, _T_78) @[Counter.scala 64:20]
    wire countOn : UInt<1> @[Test.scala 33:21]
    reg value_2 : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[Counter.scala 26:33]
    when countOn : @[Counter.scala 63:17]
      node _T_87 = eq(value_2, UInt<8>("h0ff")) @[Counter.scala 34:24]
      node _T_89 = add(value_2, UInt<1>("h01")) @[Counter.scala 35:22]
      node _T_90 = tail(_T_89, 1) @[Counter.scala 35:22]
      value_2 <= _T_90 @[Counter.scala 35:13]
      skip @[Counter.scala 63:17]
    node _T_91 = and(countOn, _T_87) @[Counter.scala 64:20]
    when UInt<1>("h01") : @[Counter.scala 63:17]
      skip @[Counter.scala 63:17]
    node _T_94 = and(UInt<1>("h01"), UInt<1>("h01")) @[Counter.scala 64:20]
    node _T_96 = gt(value_1, UInt<4>("h08")) @[Test.scala 36:12]
    when _T_96 : @[Test.scala 36:19]
      countOn <= UInt<1>("h01") @[Test.scala 37:13]
      io.b[UInt<1>("h00")] <= value_2 @[Test.scala 38:18]
      skip @[Test.scala 36:19]
    else : @[Test.scala 39:16]
      countOn <= UInt<1>("h00") @[Test.scala 40:13]
      io.b[UInt<1>("h00")] <= UInt<1>("h01") @[Test.scala 41:18]
      skip @[Test.scala 39:16]
    io.a[UInt<1>("h00")] <= value_1 @[Test.scala 44:16]
    reg aIn : UInt<8>[2], clock @[Test.scala 47:20]
    aIn[0] <= io.a[0] @[Test.scala 47:20]
    aIn[1] <= io.a[1] @[Test.scala 47:20]
    reg bIn : UInt<8>[2], clock @[Test.scala 48:20]
    bIn[0] <= io.b[0] @[Test.scala 48:20]
    bIn[1] <= io.b[1] @[Test.scala 48:20]
    reg ovflIn : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Test.scala 49:23]
    ovflIn <= io.ovfl @[Test.scala 49:23]
    wire zeroIn : UInt<1> @[Test.scala 50:20]
    zeroIn <= io.zero @[Test.scala 51:10]
    wire negIn : UInt<1> @[Test.scala 52:19]
    negIn <= io.neg @[Test.scala 53:9]
    reg ctrlIn : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[Test.scala 54:23]
    ctrlIn <= io.ctrl @[Test.scala 54:23]
    when UInt<1>("h01") : @[Test.scala 57:16]
      node _T_146 = eq(ctrlIn, UInt<3>("h00")) @[Test.scala 59:18]
      when _T_146 : @[Test.scala 59:35]
        node _T_147 = bits(reset, 0, 0) @[Test.scala 60:15]
        node _T_149 = eq(_T_147, UInt<1>("h00")) @[Test.scala 60:15]
        when _T_149 : @[Test.scala 60:15]
          printf(clock, UInt<1>(1), "passThrough \n") @[Test.scala 60:15]
          skip @[Test.scala 60:15]
        skip @[Test.scala 59:35]
      else : @[Test.scala 61:34]
        node _T_150 = eq(ctrlIn, UInt<3>("h01")) @[Test.scala 61:25]
        when _T_150 : @[Test.scala 61:34]
          node _T_151 = bits(reset, 0, 0) @[Test.scala 62:15]
          node _T_153 = eq(_T_151, UInt<1>("h00")) @[Test.scala 62:15]
          when _T_153 : @[Test.scala 62:15]
            printf(clock, UInt<1>(1), "add \n") @[Test.scala 62:15]
            skip @[Test.scala 62:15]
          skip @[Test.scala 61:34]
        else : @[Test.scala 63:39]
          node _T_154 = eq(ctrlIn, UInt<3>("h02")) @[Test.scala 63:25]
          when _T_154 : @[Test.scala 63:39]
            node _T_155 = bits(reset, 0, 0) @[Test.scala 64:15]
            node _T_157 = eq(_T_155, UInt<1>("h00")) @[Test.scala 64:15]
            when _T_157 : @[Test.scala 64:15]
              printf(clock, UInt<1>(1), "subtract \n") @[Test.scala 64:15]
              skip @[Test.scala 64:15]
            skip @[Test.scala 63:39]
          else : @[Test.scala 65:34]
            node _T_158 = eq(ctrlIn, UInt<3>("h03")) @[Test.scala 65:25]
            when _T_158 : @[Test.scala 65:34]
              node _T_159 = bits(reset, 0, 0) @[Test.scala 66:15]
              node _T_161 = eq(_T_159, UInt<1>("h00")) @[Test.scala 66:15]
              when _T_161 : @[Test.scala 66:15]
                printf(clock, UInt<1>(1), "and \n") @[Test.scala 66:15]
                skip @[Test.scala 66:15]
              node _T_162 = bits(reset, 0, 0) @[Test.scala 67:15]
              node _T_164 = eq(_T_162, UInt<1>("h00")) @[Test.scala 67:15]
              when _T_164 : @[Test.scala 67:15]
                printf(clock, UInt<1>(1), "%b &\n%b = \n%b \n", aIn[0], bIn[0], io.y[0]) @[Test.scala 67:15]
                skip @[Test.scala 67:15]
              skip @[Test.scala 65:34]
            else : @[Test.scala 68:33]
              node _T_165 = eq(ctrlIn, UInt<3>("h04")) @[Test.scala 68:25]
              when _T_165 : @[Test.scala 68:33]
                node _T_166 = bits(reset, 0, 0) @[Test.scala 69:15]
                node _T_168 = eq(_T_166, UInt<1>("h00")) @[Test.scala 69:15]
                when _T_168 : @[Test.scala 69:15]
                  printf(clock, UInt<1>(1), "or \n") @[Test.scala 69:15]
                  skip @[Test.scala 69:15]
                node _T_169 = bits(reset, 0, 0) @[Test.scala 70:15]
                node _T_171 = eq(_T_169, UInt<1>("h00")) @[Test.scala 70:15]
                when _T_171 : @[Test.scala 70:15]
                  printf(clock, UInt<1>(1), "%b |\n%b = \n%b \n", aIn[0], bIn[0], io.y[0]) @[Test.scala 70:15]
                  skip @[Test.scala 70:15]
                skip @[Test.scala 68:33]
              else : @[Test.scala 71:34]
                node _T_172 = eq(ctrlIn, UInt<3>("h05")) @[Test.scala 71:25]
                when _T_172 : @[Test.scala 71:34]
                  node _T_173 = bits(reset, 0, 0) @[Test.scala 72:15]
                  node _T_175 = eq(_T_173, UInt<1>("h00")) @[Test.scala 72:15]
                  when _T_175 : @[Test.scala 72:15]
                    printf(clock, UInt<1>(1), "xor \n") @[Test.scala 72:15]
                    skip @[Test.scala 72:15]
                  node _T_176 = bits(reset, 0, 0) @[Test.scala 73:15]
                  node _T_178 = eq(_T_176, UInt<1>("h00")) @[Test.scala 73:15]
                  when _T_178 : @[Test.scala 73:15]
                    printf(clock, UInt<1>(1), "%b ^\n%b = \n%b \n", aIn[0], bIn[0], io.y[0]) @[Test.scala 73:15]
                    skip @[Test.scala 73:15]
                  skip @[Test.scala 71:34]
                else : @[Test.scala 74:19]
                  node _T_179 = bits(reset, 0, 0) @[Test.scala 75:15]
                  node _T_181 = eq(_T_179, UInt<1>("h00")) @[Test.scala 75:15]
                  when _T_181 : @[Test.scala 75:15]
                    printf(clock, UInt<1>(1), " \n") @[Test.scala 75:15]
                    skip @[Test.scala 75:15]
                  skip @[Test.scala 74:19]
      node _T_182 = neq(ctrlIn, UInt<3>("h04")) @[Test.scala 78:18]
      node _T_183 = neq(ctrlIn, UInt<3>("h03")) @[Test.scala 78:37]
      node _T_184 = and(_T_182, _T_183) @[Test.scala 78:26]
      node _T_185 = neq(ctrlIn, UInt<3>("h05")) @[Test.scala 78:57]
      node _T_186 = and(_T_184, _T_185) @[Test.scala 78:46]
      when _T_186 : @[Test.scala 78:67]
        node _T_187 = bits(reset, 0, 0) @[Test.scala 79:13]
        node _T_189 = eq(_T_187, UInt<1>("h00")) @[Test.scala 79:13]
        when _T_189 : @[Test.scala 79:13]
          printf(clock, UInt<1>(1), "a is Vec(%d, %d)\n", aIn[0], aIn[1]) @[Test.scala 79:13]
          skip @[Test.scala 79:13]
        node _T_190 = bits(reset, 0, 0) @[Test.scala 79:37]
        node _T_192 = eq(_T_190, UInt<1>("h00")) @[Test.scala 79:37]
        when _T_192 : @[Test.scala 79:37]
          printf(clock, UInt<1>(1), "b is Vec(%d, %d)\n", bIn[0], bIn[1]) @[Test.scala 79:37]
          skip @[Test.scala 79:37]
        node _T_193 = bits(reset, 0, 0) @[Test.scala 79:61]
        node _T_195 = eq(_T_193, UInt<1>("h00")) @[Test.scala 79:61]
        when _T_195 : @[Test.scala 79:61]
          printf(clock, UInt<1>(1), "y is Vec(%d, %d) \n", io.y[0], io.y[1]) @[Test.scala 79:61]
          skip @[Test.scala 79:61]
        node _T_196 = bits(reset, 0, 0) @[Test.scala 80:13]
        node _T_198 = eq(_T_196, UInt<1>("h00")) @[Test.scala 80:13]
        when _T_198 : @[Test.scala 80:13]
          printf(clock, UInt<1>(1), "ovfl:%d zero:%d neg:%d \n \n", ovflIn, zeroIn, negIn) @[Test.scala 80:13]
          skip @[Test.scala 80:13]
        skip @[Test.scala 78:67]
      else : @[Test.scala 81:18]
        node _T_199 = bits(reset, 0, 0) @[Test.scala 82:13]
        node _T_201 = eq(_T_199, UInt<1>("h00")) @[Test.scala 82:13]
        when _T_201 : @[Test.scala 82:13]
          printf(clock, UInt<1>(1), "\n") @[Test.scala 82:13]
          skip @[Test.scala 82:13]
        skip @[Test.scala 81:18]
      skip @[Test.scala 57:16]
    
  module ALU : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip a : UInt<8>[2], flip b : UInt<8>[2], flip ctrl : UInt<3>, result : UInt<8>[2], negative : UInt<1>, zero : UInt<1>, overflow : UInt<1>}
    
    wire max2comp : UInt<8> @[Adder.scala 21:22]
    max2comp <= UInt<8>("h080") @[Adder.scala 22:12]
    wire out : UInt<8>[2] @[Adder.scala 23:20]
    reg storedValue : UInt<8>[2], clock @[Adder.scala 24:31]
    storedValue[0] <= out[0] @[Adder.scala 24:31]
    storedValue[1] <= out[1] @[Adder.scala 24:31]
    wire overflowVector : UInt<1>[2] @[Adder.scala 26:30]
    wire zeroVector : UInt<1>[2] @[Adder.scala 27:26]
    wire negVector : UInt<1>[2] @[Adder.scala 28:25]
    node _T_103 = eq(io.ctrl, UInt<3>("h00")) @[Adder.scala 31:20]
    when _T_103 : @[Adder.scala 31:37]
      out[0] <= io.a[0] @[Adder.scala 32:16]
      skip @[Adder.scala 31:37]
    else : @[Adder.scala 33:36]
      node _T_104 = eq(io.ctrl, UInt<3>("h01")) @[Adder.scala 33:27]
      when _T_104 : @[Adder.scala 33:36]
        node _T_105 = add(io.a[0], io.b[0]) @[Adder.scala 34:27]
        node _T_106 = tail(_T_105, 1) @[Adder.scala 34:27]
        out[0] <= _T_106 @[Adder.scala 34:16]
        skip @[Adder.scala 33:36]
      else : @[Adder.scala 35:41]
        node _T_107 = eq(io.ctrl, UInt<3>("h02")) @[Adder.scala 35:27]
        when _T_107 : @[Adder.scala 35:41]
          node _T_108 = sub(io.a[0], io.b[0]) @[Adder.scala 36:27]
          node _T_109 = asUInt(_T_108) @[Adder.scala 36:27]
          node _T_110 = tail(_T_109, 1) @[Adder.scala 36:27]
          out[0] <= _T_110 @[Adder.scala 36:16]
          skip @[Adder.scala 35:41]
        else : @[Adder.scala 42:36]
          node _T_111 = eq(io.ctrl, UInt<3>("h03")) @[Adder.scala 42:27]
          when _T_111 : @[Adder.scala 42:36]
            node _T_112 = and(io.a[0], io.b[0]) @[Adder.scala 43:27]
            out[0] <= _T_112 @[Adder.scala 43:16]
            skip @[Adder.scala 42:36]
          else : @[Adder.scala 44:35]
            node _T_113 = eq(io.ctrl, UInt<3>("h04")) @[Adder.scala 44:27]
            when _T_113 : @[Adder.scala 44:35]
              node _T_114 = or(io.a[0], io.b[0]) @[Adder.scala 45:27]
              out[0] <= _T_114 @[Adder.scala 45:16]
              skip @[Adder.scala 44:35]
            else : @[Adder.scala 46:36]
              node _T_115 = eq(io.ctrl, UInt<3>("h05")) @[Adder.scala 46:27]
              when _T_115 : @[Adder.scala 46:36]
                node _T_116 = xor(io.a[0], io.b[0]) @[Adder.scala 47:27]
                out[0] <= _T_116 @[Adder.scala 47:16]
                skip @[Adder.scala 46:36]
              else : @[Adder.scala 48:20]
                out[0] <= UInt<8>("h00") @[Adder.scala 49:16]
                skip @[Adder.scala 48:20]
    node _T_119 = neq(io.result[0], UInt<1>("h00")) @[Adder.scala 51:39]
    node _T_120 = not(_T_119) @[Adder.scala 51:24]
    zeroVector[0] <= _T_120 @[Adder.scala 51:21]
    node _T_121 = bits(io.result[0], 7, 7) @[Adder.scala 52:35]
    negVector[0] <= _T_121 @[Adder.scala 52:20]
    node _T_122 = bits(io.a[0], 7, 7) @[Adder.scala 56:38]
    node _T_123 = bits(io.b[0], 7, 7) @[Adder.scala 56:62]
    node _T_124 = eq(_T_122, _T_123) @[Adder.scala 56:51]
    node _T_125 = bits(out[0], 7, 7) @[Adder.scala 56:86]
    node _T_126 = bits(io.a[0], 7, 7) @[Adder.scala 56:110]
    node _T_127 = neq(_T_125, _T_126) @[Adder.scala 56:99]
    node _T_128 = and(_T_124, _T_127) @[Adder.scala 56:76]
    overflowVector[0] <= _T_128 @[Adder.scala 56:27]
    node _T_129 = eq(io.ctrl, UInt<3>("h00")) @[Adder.scala 31:20]
    when _T_129 : @[Adder.scala 31:37]
      out[1] <= io.a[1] @[Adder.scala 32:16]
      skip @[Adder.scala 31:37]
    else : @[Adder.scala 33:36]
      node _T_130 = eq(io.ctrl, UInt<3>("h01")) @[Adder.scala 33:27]
      when _T_130 : @[Adder.scala 33:36]
        node _T_131 = add(io.a[1], io.b[1]) @[Adder.scala 34:27]
        node _T_132 = tail(_T_131, 1) @[Adder.scala 34:27]
        out[1] <= _T_132 @[Adder.scala 34:16]
        skip @[Adder.scala 33:36]
      else : @[Adder.scala 35:41]
        node _T_133 = eq(io.ctrl, UInt<3>("h02")) @[Adder.scala 35:27]
        when _T_133 : @[Adder.scala 35:41]
          node _T_134 = sub(io.a[1], io.b[1]) @[Adder.scala 36:27]
          node _T_135 = asUInt(_T_134) @[Adder.scala 36:27]
          node _T_136 = tail(_T_135, 1) @[Adder.scala 36:27]
          out[1] <= _T_136 @[Adder.scala 36:16]
          skip @[Adder.scala 35:41]
        else : @[Adder.scala 42:36]
          node _T_137 = eq(io.ctrl, UInt<3>("h03")) @[Adder.scala 42:27]
          when _T_137 : @[Adder.scala 42:36]
            node _T_138 = and(io.a[1], io.b[1]) @[Adder.scala 43:27]
            out[1] <= _T_138 @[Adder.scala 43:16]
            skip @[Adder.scala 42:36]
          else : @[Adder.scala 44:35]
            node _T_139 = eq(io.ctrl, UInt<3>("h04")) @[Adder.scala 44:27]
            when _T_139 : @[Adder.scala 44:35]
              node _T_140 = or(io.a[1], io.b[1]) @[Adder.scala 45:27]
              out[1] <= _T_140 @[Adder.scala 45:16]
              skip @[Adder.scala 44:35]
            else : @[Adder.scala 46:36]
              node _T_141 = eq(io.ctrl, UInt<3>("h05")) @[Adder.scala 46:27]
              when _T_141 : @[Adder.scala 46:36]
                node _T_142 = xor(io.a[1], io.b[1]) @[Adder.scala 47:27]
                out[1] <= _T_142 @[Adder.scala 47:16]
                skip @[Adder.scala 46:36]
              else : @[Adder.scala 48:20]
                out[1] <= UInt<8>("h00") @[Adder.scala 49:16]
                skip @[Adder.scala 48:20]
    node _T_145 = neq(io.result[1], UInt<1>("h00")) @[Adder.scala 51:39]
    node _T_146 = not(_T_145) @[Adder.scala 51:24]
    zeroVector[1] <= _T_146 @[Adder.scala 51:21]
    node _T_147 = bits(io.result[1], 7, 7) @[Adder.scala 52:35]
    negVector[1] <= _T_147 @[Adder.scala 52:20]
    node _T_148 = bits(io.a[1], 7, 7) @[Adder.scala 56:38]
    node _T_149 = bits(io.b[1], 7, 7) @[Adder.scala 56:62]
    node _T_150 = eq(_T_148, _T_149) @[Adder.scala 56:51]
    node _T_151 = bits(out[1], 7, 7) @[Adder.scala 56:86]
    node _T_152 = bits(io.a[1], 7, 7) @[Adder.scala 56:110]
    node _T_153 = neq(_T_151, _T_152) @[Adder.scala 56:99]
    node _T_154 = and(_T_150, _T_153) @[Adder.scala 56:76]
    overflowVector[1] <= _T_154 @[Adder.scala 56:27]
    io.result[0] <= storedValue[0] @[Adder.scala 59:15]
    io.result[1] <= storedValue[1] @[Adder.scala 59:15]
    node _T_156 = eq(zeroVector[0], UInt<1>("h00")) @[Adder.scala 60:36]
    node _T_157 = eq(zeroVector[1], UInt<1>("h00")) @[Adder.scala 60:36]
    node _T_159 = or(UInt<1>("h00"), _T_156) @[Adder.scala 60:36]
    node _T_160 = or(_T_159, _T_157) @[Adder.scala 60:36]
    node _T_162 = eq(_T_160, UInt<1>("h00")) @[Adder.scala 60:16]
    io.zero <= _T_162 @[Adder.scala 60:13]
    node _T_164 = eq(overflowVector[0], UInt<1>("h01")) @[Adder.scala 61:43]
    node _T_165 = eq(overflowVector[1], UInt<1>("h01")) @[Adder.scala 61:43]
    node _T_167 = or(UInt<1>("h00"), _T_164) @[Adder.scala 61:43]
    node _T_168 = or(_T_167, _T_165) @[Adder.scala 61:43]
    io.overflow <= _T_168 @[Adder.scala 61:17]
    node _T_170 = eq(negVector[0], UInt<1>("h01")) @[Adder.scala 62:38]
    node _T_171 = eq(negVector[1], UInt<1>("h01")) @[Adder.scala 62:38]
    node _T_173 = or(UInt<1>("h00"), _T_170) @[Adder.scala 62:38]
    node _T_174 = or(_T_173, _T_171) @[Adder.scala 62:38]
    io.negative <= _T_174 @[Adder.scala 62:17]
    
  module Test : 
    input clock : Clock
    input reset : UInt<1>
    output io : {}
    
    inst gen of DataGen @[Test.scala 90:19]
    gen.clock <= clock
    gen.reset <= reset
    inst alu of ALU @[Test.scala 91:19]
    alu.clock <= clock
    alu.reset <= reset
    alu.io.a[0] <= gen.io.a[0] @[Test.scala 92:12]
    alu.io.a[1] <= gen.io.a[1] @[Test.scala 92:12]
    alu.io.b[0] <= gen.io.b[0] @[Test.scala 93:12]
    alu.io.b[1] <= gen.io.b[1] @[Test.scala 93:12]
    gen.io.y[0] <= alu.io.result[0] @[Test.scala 94:12]
    gen.io.y[1] <= alu.io.result[1] @[Test.scala 94:12]
    gen.io.ovfl <= alu.io.overflow @[Test.scala 95:15]
    gen.io.zero <= alu.io.zero @[Test.scala 96:15]
    gen.io.neg <= alu.io.negative @[Test.scala 97:14]
    reg value : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Counter.scala 26:33]
    when UInt<1>("h01") : @[Counter.scala 63:17]
      node _T_9 = eq(value, UInt<3>("h05")) @[Counter.scala 34:24]
      node _T_11 = add(value, UInt<1>("h01")) @[Counter.scala 35:22]
      node _T_12 = tail(_T_11, 1) @[Counter.scala 35:22]
      value <= _T_12 @[Counter.scala 35:13]
      when _T_9 : @[Counter.scala 37:21]
        value <= UInt<1>("h00") @[Counter.scala 37:29]
        skip @[Counter.scala 37:21]
      skip @[Counter.scala 63:17]
    node _T_14 = and(UInt<1>("h01"), _T_9) @[Counter.scala 64:20]
    alu.io.ctrl <= value @[Test.scala 99:15]
    gen.io.ctrl <= value @[Test.scala 100:15]
    
